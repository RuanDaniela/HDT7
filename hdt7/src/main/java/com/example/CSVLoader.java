package com.example;

import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;

import com.opencsv.CSVParser;
import com.opencsv.CSVParserBuilder;
import com.opencsv.CSVReader;
import com.opencsv.CSVReaderBuilder;
import com.opencsv.exceptions.CsvValidationException;

public class CSVLoader {
    public static BinarySearchTree<Product> loadProducts(String filePath) {
        BinarySearchTree<Product> bst = new BinarySearchTree<>();

        try {
            // Crear un parser con el delimitador ';'
            CSVParser parser = new CSVParserBuilder().withSeparator(';').build();
            // Crear el CSVReader con el parser
            CSVReader reader = new CSVReaderBuilder(new FileReader(filePath)).withCSVParser(parser).build();

            String[] nextLine;
            reader.readNext(); // Ignorar encabezado

            while ((nextLine = reader.readNext()) != null) {
                // üîç Imprimir la l√≠nea para ver su formato
                System.out.println("üìÑ L√≠nea del CSV: " + Arrays.toString(nextLine));

                // Validar que la l√≠nea tenga los datos necesarios (al menos 5 columnas)
                if (nextLine.length < 5) {
                    System.out.println("‚ö† Fila ignorada por tener menos de 5 columnas.");
                    continue;
                }

                try {
                    String category = nextLine[0].trim();
                    String sku = nextLine[1].trim();
                    String priceRetailStr = nextLine[2].trim();
                    String priceCurrentStr = nextLine[3].trim();
                    String productName = nextLine[4].trim();

                    // üõ† Manejar precios vac√≠os o inv√°lidos
                    double priceRetail = priceRetailStr.isEmpty() ? 0.0 : Double.parseDouble(priceRetailStr);
                    double priceCurrent = priceCurrentStr.isEmpty() ? 0.0 : Double.parseDouble(priceCurrentStr);

                    // Verificar que el SKU no est√© vac√≠o
                    if (sku.isEmpty()) {
                        System.out.println("‚ö† Fila ignorada por SKU vac√≠o.");
                        continue;
                    }

                    Product product = new Product(sku, priceRetail, priceCurrent, productName, category);
                    bst.insert(product);

                    // ‚úÖ Confirmaci√≥n de inserci√≥n
                    System.out.println("‚úÖ Insertado en BST: " + product);
                } catch (NumberFormatException e) {
                    System.err.println("üö® Error al convertir precios en l√≠nea: " + Arrays.toString(nextLine));
                }
            }
        } catch (IOException | CsvValidationException e) {
            System.err.println("‚ùå Error al leer el archivo CSV: " + e.getMessage());
        }

        return bst;
    }
}
